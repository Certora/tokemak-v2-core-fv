diff -ruN ../src/.gitignore .gitignore
--- ../src/.gitignore	1970-01-01 01:00:00
+++ .gitignore	2023-12-06 20:41:42
@@ -0,0 +1,2 @@
+*
+!.gitignore
\ No newline at end of file
diff -ruN ../src/CDPVault.sol CDPVault.sol
--- ../src/CDPVault.sol	2023-12-06 20:31:49
+++ CDPVault.sol	2023-12-13 12:34:52
@@ -8,11 +8,11 @@
 import "BoringSolidity/ERC20.sol";
 import "BoringSolidity/libraries/BoringRebase.sol";
 import "BoringSolidity/libraries/BoringERC20.sol";
-import "libraries/compat/BoringMath.sol";
-import "interfaces/IOracle.sol";
+import "./libraries/compat/BoringMath.sol";
+import "./interfaces/IOracle.sol";
 import "OpenZeppelin-Upgrades/proxy/utils/Initializable.sol";
-import "periphery/PermissionControl.sol";
-import "interfaces/ISwapperV2.sol";
+import "./periphery/PermissionControl.sol";
+import "./interfaces/ISwapperV2.sol";
 
 // solhint-disable avoid-low-level-calls
 // solhint-disable no-inline-assembly
@@ -370,7 +370,7 @@
         return (returnData, returnValues);
     }
 
-   function _additionalCookAction(uint8 action, uint256 value, bytes memory data, uint256 value1, uint256 value2) internal virtual returns (bytes memory, uint8) {}
+   function _additionalCookAction(uint8 action, uint256 value, bytes memory data, uint256 value1, uint256 value2) internal virtual returns (bytes memory returnData, uint8 returnValues) {}
 
     struct CookStatus {
         bool needsSolvencyCheck;
diff -ruN ../src/mocks/OracleMock.sol mocks/OracleMock.sol
--- ../src/mocks/OracleMock.sol	2023-12-06 20:31:49
+++ mocks/OracleMock.sol	2023-12-06 23:39:30
@@ -1,8 +1,8 @@
 // SPDX-License-Identifier: MIT
 pragma solidity >=0.8.0;
 
-import "interfaces/IAggregator.sol";
-import "interfaces/IOracle.sol";
+import "../interfaces/IAggregator.sol";
+import "../interfaces/IOracle.sol";
 
 contract OracleMock is IOracle {
     uint8 public decimals = 18;
diff -ruN ../src/periphery/PermissionControl.sol periphery/PermissionControl.sol
--- ../src/periphery/PermissionControl.sol	2023-12-06 20:31:49
+++ periphery/PermissionControl.sol	2023-12-06 23:24:50
@@ -3,7 +3,7 @@
 
 pragma solidity ^0.8.0;
 
-import "periphery/Operatable.sol";
+import "./Operatable.sol";
 
 contract PermissionControl is Operatable {
 
diff -ruN ../src/swappers/TokenSwapper.sol swappers/TokenSwapper.sol
--- ../src/swappers/TokenSwapper.sol	2023-12-06 20:31:49
+++ swappers/TokenSwapper.sol	2023-12-14 14:56:53
@@ -4,7 +4,7 @@
 
 import "BoringSolidity/interfaces/IERC20.sol";
 import "BoringSolidity/libraries/BoringERC20.sol";
-import "interfaces/ISwapperV2.sol";
+import "../interfaces/ISwapperV2.sol";
 
 /// @notice LP liquidation/deleverage swapper for tokens using Matcha/0x aggregator
 contract TokenSwapper is ISwapperV2 {
@@ -38,10 +38,10 @@
     ) public override returns (uint256 extraAmount, uint256 amountReturned) {
 
         // token -> MIM
-        (bool success, ) = zeroXExchangeProxy.call(swapData);
-        if (!success) {
-            revert ErrSwapFailed();
-        }
+        // (bool success, ) = zeroXExchangeProxy.call(swapData);
+        // if (!success) {
+        //     revert ErrSwapFailed();
+        // }
 
         amountReturned = asset.balanceOf(address(this));
         asset.safeTransfer(recipient, amountReturned);
